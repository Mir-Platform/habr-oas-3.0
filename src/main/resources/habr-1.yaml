openapi: 3.0.1
info:
  title: Пример документации для Хабра 1
  description: |
    Description

  termsOfService: urn:tos
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: "1.0"
servers:
  - url: http://localhost:8080/
tags:
  - name: 1.	Article → Habr. Получение всех статей
    description: |
      |
          ---
          __Advertisement :)__

          - __[pica](https://nodeca.github.io/pica/demo/)__ - high quality and fast image
            resize in browser.
          - __[babelfish](https://github.com/nodeca/babelfish/)__ - developer friendly
            i18n with plurals support and easy syntax.

          You will like those projects!

          ---

          # h1 Heading 8-)
          ## h2 Heading
          ### h3 Heading
          #### h4 Heading
          ##### h5 Heading
          ###### h6 Heading


          ## Horizontal Rules

          ___

          ---

          ***


          ## Typographic replacements

          Enable typographer option to see result.

          (c) (C) (r) (R) (tm) (TM) (p) (P) +-

          test.. test... test..... test?..... test!....

          !!!!!! ???? ,,  -- ---

          "Smartypants, double quotes" and 'single quotes'


          ## Emphasis

          **This is bold text**

          __This is bold text__

          *This is italic text*

          _This is italic text_

          ~~Strikethrough~~


          ## Blockquotes


          > Blockquotes can also be nested...
          >> ...by using additional greater-than signs right next to each other...
          > > > ...or with spaces between arrows.


          ## Lists

          Unordered

          + Create a list by starting a line with `+`, `-`, or `*`
          + Sub-lists are made by indenting 2 spaces:
            - Marker character change forces new list start:
              * Ac tristique libero volutpat at
              + Facilisis in pretium nisl aliquet
              - Nulla volutpat aliquam velit
          + Very easy!

          Ordered

          1. Lorem ipsum dolor sit amet
          2. Consectetur adipiscing elit
          3. Integer molestie lorem at massa


          1. You can use sequential numbers...
          1. ...or keep all the numbers as `1.`

          Start numbering with offset:

          57. foo
          1. bar


          ## Code

          Inline `code`

          Indented code

              // Some comments
              line 1 of code
              line 2 of code
              line 3 of code


          Block code "fences"

          ```
          Sample text here...
          ```

          Syntax highlighting

          ``` js
          var foo = function (bar) {
            return bar++;
          };

          console.log(foo(5));
          ```

          ## Tables

          | Option | Description |
          | ------ | ----------- |
          | data   | path to data files to supply the data that will be passed into templates. |
          | engine | engine to be used for processing templates. Handlebars is the default. |
          | ext    | extension to be used for dest files. |

          Right aligned columns

          | Option | Description |
          | ------:| -----------:|
          | data   | path to data files to supply the data that will be passed into templates. |
          | engine | engine to be used for processing templates. Handlebars is the default. |
          | ext    | extension to be used for dest files. |


          ## Links

          [link text](http://dev.nodeca.com)

          [link with title](http://nodeca.github.io/pica/demo/ "title text!")

          Autoconverted link https://github.com/nodeca/pica (enable linkify to see)


          ## Images

          ![Minion](https://octodex.github.com/images/minion.png)
          ![Stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg "The Stormtroopocat")

          Like links, Images also have a footnote style syntax

          ![Alt text][id]

          With a reference later in the document defining the URL location:

          [id]: https://octodex.github.com/images/dojocat.jpg  "The Dojocat"


          ## Plugins

          The killer feature of `markdown-it` is very effective support of
          [syntax plugins](https://www.npmjs.org/browse/keyword/markdown-it-plugin).


          ### [Emojies](https://github.com/markdown-it/markdown-it-emoji)

          > Classic markup: :wink: :crush: :cry: :tear: :laughing: :yum:
          >
          > Shortcuts (emoticons): :-) :-( 8-) ;)

          see [how to change output](https://github.com/markdown-it/markdown-it-emoji#change-output) with twemoji.


          ### [Subscript](https://github.com/markdown-it/markdown-it-sub) / [Superscript](https://github.com/markdown-it/markdown-it-sup)

          - 19^th^
          - H~2~O


          ### [\<ins>](https://github.com/markdown-it/markdown-it-ins)

          ++Inserted text++


          ### [\<mark>](https://github.com/markdown-it/markdown-it-mark)

          ==Marked text==


          ### [Footnotes](https://github.com/markdown-it/markdown-it-footnote)

          Footnote 1 link[^first].

          Footnote 2 link[^second].

          Inline footnote^[Text of inline footnote] definition.

          Duplicated footnote reference[^second].

          [^first]: Footnote **can have markup**

              and multiple paragraphs.

          [^second]: Footnote text.


          ### [Definition lists](https://github.com/markdown-it/markdown-it-deflist)

          Term 1

          :   Definition 1
          with lazy continuation.

          Term 2 with *inline markup*

          :   Definition 2

                  { some code, part of Definition 2 }

              Third paragraph of definition 2.

          _Compact style:_

          Term 1
            ~ Definition 1

          Term 2
            ~ Definition 2a
            ~ Definition 2b


          ### [Abbreviations](https://github.com/markdown-it/markdown-it-abbr)

          This is HTML abbreviation example.

          It converts "HTML", but keep intact partial entries like "xxxHTMLyyy" and so on.

          *[HTML]: Hyper Text Markup Language

          ### [Custom containers](https://github.com/markdown-it/markdown-it-container)

          ::: warning
          *here be dragons*
          :::
paths:
  /articles/:
    get:
      tags:
        - 1.	Article → Habr. Получение всех статей
      summary: GET article by id
      security:
        - Bearer: []
      operationId: getArticles
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArticleDto'
        401:
          $ref: 'common.yaml#/components/responses/UnauthorizedError'
        400:
          $ref: 'common.yaml#/components/responses/Bad_Request'
    post:
      tags:
        - 2.	Acticle → Habr. Создание новой статьи
      summary: CREATE
      security:
        - Bearer: []
      operationId: create
      description: |

      parameters:
        - name: x-idempotency-key
          in: header
          description: x-idempotency-key
          required: true
          schema:
            type: string
      requestBody:
        description: article request
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/ArticleDto'
        required: true
      responses:
        201:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ArticleDto'
        401:
          $ref: 'common.yaml#/components/responses/UnauthorizedError'
        400:
          $ref: 'common.yaml#/components/responses/Bad_Request'

  /articles/{articleId}:
    get:
      tags:
        - 3.	Articles → Habr. Получение статьи по Id
      summary: GET articleId
      security:
        - Bearer: []
      operationId: get article
      parameters:
        - name: articleId
          in: path
          description: идентификатор ресурса article
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ArticleDto'
        401:
          $ref: 'common.yaml#/components/responses/UnauthorizedError'
        400:
          $ref: 'common.yaml#/components/responses/Bad_Request'
    put:
      tags:
        - 4.	Article → Habr. Измнение статьи
      summary: UPDATE
      security:
        - Bearer: []
      operationId: update
      parameters:
        - name: articleId
          in: path
          description: Идентификатор ресурса article
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: article update
        content:
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/ArticleDto'
        required: true
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ArticleDto'
        401:
          $ref: 'common.yaml#/components/responses/UnauthorizedError'
        400:
          $ref: 'common.yaml#/components/responses/Bad_Request'
    delete:
      tags:
        - 5.	Article → Habr. Удаление статьи
      summary: DELETE
      security:
        - Bearer: []
      operationId: delete
      parameters:
        - name: articleId
          in: path
          description: Идентификатор ресурса article
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
        401:
          $ref: 'common.yaml#/components/responses/UnauthorizedError'
        400:
          $ref: 'common.yaml#/components/responses/Bad_Request'

components:
  schemas:
    ArticleDto:
      type: object
      properties:
        author:
          type: string
          minLength: 3
          maxLength: 50
        title:
          type: string
          minLength: 3
          maxLength: 20
        hubs:
          type: array
          items:
            $ref: '#/components/schemas/Hubs'
        text:
          type: string
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[`~!@#$%^&*()-+={}\\[\\]\\\\|:;\"'<>,.?/])[A-Za-z\\d`~!@#$%^&*()-+={}\\[\\]\\\\|:;\"'<>,.?/]{12,64}$"
    Hubs:
      type: string
      enum:
        - "JAVA"
        - "MATH"
        - "JUNK"
  securitySchemes:
    Bearer:
      description: |
        For accessing the API a valid JWT token must be passed in all the queries in
        the 'Authorization' header.


        A valid JWT token is generated by the API and retourned as answer of a call
        to the route /users/signin giving a valid user & password.


        The following syntax must be used in the 'Authorization' header :

            Bearer xxxxxx.yyyyyyy.zzzzzz


      type: apiKey
      in: header
      name: "Authorization"
security:
  - Bearer: []